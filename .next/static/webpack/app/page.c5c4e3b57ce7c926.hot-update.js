"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useSimulador.ts":
/*!***********************************!*\
  !*** ./src/hooks/useSimulador.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSimulador: () => (/* binding */ useSimulador)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst useSimulador = ()=>{\n    const [simulacao, setSimulacao] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        valorBruto: 0,\n        desconto: 0,\n        valorNegociado: 0,\n        formasPagamento: [],\n        valorRecebidoTotal: 0,\n        descontoReal: 0,\n        valorRestante: 0,\n        travamentos: {\n            valorNegociado: false,\n            descontoReal: false,\n            limiteDescontoReal: 25\n        }\n    });\n    // Prioridade para redistribuição de valores\n    const PRIORIDADE_FORMAS = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useSimulador.useMemo[PRIORIDADE_FORMAS]\": ()=>[\n                'ENTRADA',\n                'BOLETO',\n                'FINANCEIRA',\n                'CARTAO'\n            ]\n    }[\"useSimulador.useMemo[PRIORIDADE_FORMAS]\"], []);\n    const calcularValorRecebidoForma = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[calcularValorRecebidoForma]\": (forma)=>{\n            console.log('Calculando valor recebido para:', forma);\n            switch(forma.tipo){\n                case 'ENTRADA':\n                    return forma.valor;\n                case 'FINANCEIRA':\n                    {\n                        if (!forma.parcelas || !forma.taxaJuros) return forma.valor;\n                        const i = forma.taxaJuros / 100;\n                        const parcelas = forma.parcelas;\n                        const valorPresente = forma.valor / Math.pow(1 + i, parcelas);\n                        console.log(\"Financeira: valor=\".concat(forma.valor, \", parcelas=\").concat(parcelas, \", taxa=\").concat(forma.taxaJuros, \"%, VP=\").concat(valorPresente));\n                        return valorPresente;\n                    }\n                case 'CARTAO':\n                    {\n                        if (!forma.deflacao || !forma.jurosAntecipacao || !forma.parcelas) return forma.valor;\n                        const fatorDeflacao = 1 - forma.deflacao / 100;\n                        const fatorJuros = 1 - forma.jurosAntecipacao / 100 * forma.parcelas;\n                        const valorRecebido = forma.valor * fatorDeflacao * fatorJuros;\n                        console.log(\"Cart\\xe3o: valor=\".concat(forma.valor, \", defla\\xe7\\xe3o=\").concat(forma.deflacao, \"%, juros=\").concat(forma.jurosAntecipacao, \"%, VR=\").concat(valorRecebido));\n                        return valorRecebido;\n                    }\n                case 'BOLETO':\n                    {\n                        if (!forma.parcelas || !forma.custoCapital) return forma.valor;\n                        const ic = forma.custoCapital / 100;\n                        const valorPresenteBoleto = forma.valor / Math.pow(1 + ic, forma.parcelas);\n                        console.log(\"Boleto: valor=\".concat(forma.valor, \", parcelas=\").concat(forma.parcelas, \", custo=\").concat(forma.custoCapital, \"%, VP=\").concat(valorPresenteBoleto));\n                        return valorPresenteBoleto;\n                    }\n                default:\n                    return forma.valor;\n            }\n        }\n    }[\"useSimulador.useCallback[calcularValorRecebidoForma]\"], []);\n    const redistribuirValores = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[redistribuirValores]\": (novoValorNegociado, formasAtuais)=>{\n            console.log('Redistribuindo valores. Novo valor negociado:', novoValorNegociado);\n            const somaAtual = formasAtuais.reduce({\n                \"useSimulador.useCallback[redistribuirValores].somaAtual\": (acc, forma)=>acc + forma.valor\n            }[\"useSimulador.useCallback[redistribuirValores].somaAtual\"], 0);\n            const diferenca = novoValorNegociado - somaAtual;\n            if (Math.abs(diferenca) < 0.01) {\n                return formasAtuais; // Não há diferença significativa\n            }\n            console.log('Diferença a redistribuir:', diferenca);\n            // Separar formas travadas e não travadas\n            const formasTravadas = formasAtuais.filter({\n                \"useSimulador.useCallback[redistribuirValores].formasTravadas\": (forma)=>forma.travado\n            }[\"useSimulador.useCallback[redistribuirValores].formasTravadas\"]);\n            const formasNaoTravadas = formasAtuais.filter({\n                \"useSimulador.useCallback[redistribuirValores].formasNaoTravadas\": (forma)=>!forma.travado\n            }[\"useSimulador.useCallback[redistribuirValores].formasNaoTravadas\"]);\n            // Se todas estão travadas, não podemos redistribuir\n            if (formasNaoTravadas.length === 0) {\n                console.log('Todas as formas estão travadas');\n                return null; // Indica erro\n            }\n            // Ordenar formas não travadas por prioridade\n            const formasOrdenadas = formasNaoTravadas.sort({\n                \"useSimulador.useCallback[redistribuirValores].formasOrdenadas\": (a, b)=>{\n                    const prioridadeA = PRIORIDADE_FORMAS.indexOf(a.tipo);\n                    const prioridadeB = PRIORIDADE_FORMAS.indexOf(b.tipo);\n                    return prioridadeA - prioridadeB;\n                }\n            }[\"useSimulador.useCallback[redistribuirValores].formasOrdenadas\"]);\n            console.log('Formas ordenadas por prioridade:', formasOrdenadas.map({\n                \"useSimulador.useCallback[redistribuirValores]\": (f)=>f.tipo\n            }[\"useSimulador.useCallback[redistribuirValores]\"]));\n            // Redistribuir a diferença: apenas a primeira forma na ordem de prioridade absorve toda a diferença\n            const novasFormas = [\n                ...formasAtuais\n            ];\n            // Verificar se todas as formas não travadas têm valor zero\n            const somaFormasNaoTravadas = formasOrdenadas.reduce({\n                \"useSimulador.useCallback[redistribuirValores].somaFormasNaoTravadas\": (acc, forma)=>acc + forma.valor\n            }[\"useSimulador.useCallback[redistribuirValores].somaFormasNaoTravadas\"], 0);\n            if (somaFormasNaoTravadas === 0) {\n                // Se todas as formas não travadas têm valor 0, distribui igualmente\n                console.log('Todas as formas não travadas têm valor zero, distribuindo igualmente');\n                const ajustePorForma = diferenca / formasOrdenadas.length;\n                formasOrdenadas.forEach({\n                    \"useSimulador.useCallback[redistribuirValores]\": (forma)=>{\n                        const formaIndex = novasFormas.findIndex({\n                            \"useSimulador.useCallback[redistribuirValores].formaIndex\": (f)=>f.id === forma.id\n                        }[\"useSimulador.useCallback[redistribuirValores].formaIndex\"]);\n                        const novoValor = ajustePorForma;\n                        novasFormas[formaIndex] = {\n                            ...novasFormas[formaIndex],\n                            valor: Math.max(0, novoValor)\n                        };\n                        console.log(\"Forma \".concat(forma.tipo, \" ajustada para: \").concat(novoValor, \" (final: \").concat(Math.max(0, novoValor), \")\"));\n                    }\n                }[\"useSimulador.useCallback[redistribuirValores]\"]);\n            } else {\n                // Apenas a primeira forma não travada na ordem de prioridade absorve toda a diferença\n                console.log('Ajustando apenas a primeira forma na ordem de prioridade');\n                const primeiraForma = formasOrdenadas[0];\n                const formaIndex = novasFormas.findIndex({\n                    \"useSimulador.useCallback[redistribuirValores].formaIndex\": (f)=>f.id === primeiraForma.id\n                }[\"useSimulador.useCallback[redistribuirValores].formaIndex\"]);\n                const valorCalculado = primeiraForma.valor + diferenca;\n                const novoValor = Math.max(0, valorCalculado);\n                novasFormas[formaIndex] = {\n                    ...novasFormas[formaIndex],\n                    valor: novoValor\n                };\n                console.log(\"Forma \".concat(primeiraForma.tipo, \" ajustada de \").concat(primeiraForma.valor, \" para \").concat(valorCalculado, \" (final: \").concat(novoValor, \")\"));\n                // Se o valor ficou negativo, indicar impossibilidade\n                if (valorCalculado < 0) {\n                    console.log(\"⚠️ Valor negativo detectado (\".concat(valorCalculado, \"), pode estar no limite de desconto real\"));\n                }\n            }\n            return novasFormas;\n        }\n    }[\"useSimulador.useCallback[redistribuirValores]\"], [\n        PRIORIDADE_FORMAS\n    ]);\n    const recalcularSimulacao = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[recalcularSimulacao]\": (updates)=>{\n            console.log('Recalculando simulação com updates:', updates);\n            setSimulacao({\n                \"useSimulador.useCallback[recalcularSimulacao]\": (prev)=>{\n                    const updated = {\n                        ...prev,\n                        ...updates\n                    };\n                    // Lógica de travamento do valor negociado\n                    if (updated.travamentos.valorNegociado) {\n                        // Se valor negociado está travado, ajusta o desconto quando valor bruto muda\n                        if (updates.valorBruto !== undefined && updates.valorBruto > 0) {\n                            updated.desconto = (updated.valorBruto - updated.valorNegociado) / updated.valorBruto * 100;\n                        }\n                    } else {\n                        // Comportamento normal: calcula valor negociado baseado no desconto\n                        updated.valorNegociado = updated.valorBruto * (1 - updated.desconto / 100);\n                    }\n                    updated.formasPagamento = updated.formasPagamento.map({\n                        \"useSimulador.useCallback[recalcularSimulacao]\": (forma)=>({\n                                ...forma,\n                                valorRecebido: calcularValorRecebidoForma(forma)\n                            })\n                    }[\"useSimulador.useCallback[recalcularSimulacao]\"]);\n                    updated.valorRecebidoTotal = updated.formasPagamento.reduce({\n                        \"useSimulador.useCallback[recalcularSimulacao]\": (acc, forma)=>acc + forma.valorRecebido\n                    }[\"useSimulador.useCallback[recalcularSimulacao]\"], 0);\n                    updated.descontoReal = updated.valorBruto > 0 ? (updated.valorBruto - updated.valorRecebidoTotal) / updated.valorBruto * 100 : 0;\n                    const somaFormas = updated.formasPagamento.reduce({\n                        \"useSimulador.useCallback[recalcularSimulacao].somaFormas\": (acc, forma)=>acc + forma.valor\n                    }[\"useSimulador.useCallback[recalcularSimulacao].somaFormas\"], 0);\n                    updated.valorRestante = updated.valorNegociado - somaFormas;\n                    console.log('Simulação atualizada:', updated);\n                    return updated;\n                }\n            }[\"useSimulador.useCallback[recalcularSimulacao]\"]);\n        }\n    }[\"useSimulador.useCallback[recalcularSimulacao]\"], [\n        calcularValorRecebidoForma\n    ]);\n    const editarValorNegociado = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[editarValorNegociado]\": (novoValor)=>{\n            console.log('Editando valor negociado para:', novoValor);\n            setSimulacao({\n                \"useSimulador.useCallback[editarValorNegociado]\": (prev)=>{\n                    const formasRedistribuidas = redistribuirValores(novoValor, prev.formasPagamento);\n                    if (!formasRedistribuidas) {\n                        alert('Não é possível alterar o valor. Todas as formas de pagamento estão travadas.');\n                        return prev;\n                    }\n                    const updated = {\n                        ...prev,\n                        valorNegociado: novoValor,\n                        formasPagamento: formasRedistribuidas.map({\n                            \"useSimulador.useCallback[editarValorNegociado]\": (forma)=>({\n                                    ...forma,\n                                    valorRecebido: calcularValorRecebidoForma(forma)\n                                })\n                        }[\"useSimulador.useCallback[editarValorNegociado]\"])\n                    };\n                    // Recalcular desconto\n                    updated.desconto = updated.valorBruto > 0 ? (updated.valorBruto - updated.valorNegociado) / updated.valorBruto * 100 : 0;\n                    updated.valorRecebidoTotal = updated.formasPagamento.reduce({\n                        \"useSimulador.useCallback[editarValorNegociado]\": (acc, forma)=>acc + forma.valorRecebido\n                    }[\"useSimulador.useCallback[editarValorNegociado]\"], 0);\n                    updated.descontoReal = updated.valorBruto > 0 ? (updated.valorBruto - updated.valorRecebidoTotal) / updated.valorBruto * 100 : 0;\n                    const somaFormas = updated.formasPagamento.reduce({\n                        \"useSimulador.useCallback[editarValorNegociado].somaFormas\": (acc, forma)=>acc + forma.valor\n                    }[\"useSimulador.useCallback[editarValorNegociado].somaFormas\"], 0);\n                    updated.valorRestante = updated.valorNegociado - somaFormas;\n                    return updated;\n                }\n            }[\"useSimulador.useCallback[editarValorNegociado]\"]);\n        }\n    }[\"useSimulador.useCallback[editarValorNegociado]\"], [\n        redistribuirValores,\n        calcularValorRecebidoForma\n    ]);\n    const editarDescontoReal = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[editarDescontoReal]\": (novoDescontoReal)=>{\n            console.log('Editando desconto real para:', novoDescontoReal);\n            setSimulacao({\n                \"useSimulador.useCallback[editarDescontoReal]\": (prev)=>{\n                    // Função auxiliar para calcular o desconto real dado um valor negociado\n                    const calcularDescontoRealParaValor = {\n                        \"useSimulador.useCallback[editarDescontoReal].calcularDescontoRealParaValor\": (valorNegociado)=>{\n                            const formasTemp = redistribuirValores(valorNegociado, prev.formasPagamento);\n                            if (!formasTemp) return -1; // Indica erro\n                            const valorRecebidoTemp = formasTemp.reduce({\n                                \"useSimulador.useCallback[editarDescontoReal].calcularDescontoRealParaValor.valorRecebidoTemp\": (acc, forma)=>{\n                                    const formaComRecebido = {\n                                        ...forma,\n                                        valorRecebido: calcularValorRecebidoForma(forma)\n                                    };\n                                    return acc + formaComRecebido.valorRecebido;\n                                }\n                            }[\"useSimulador.useCallback[editarDescontoReal].calcularDescontoRealParaValor.valorRecebidoTemp\"], 0);\n                            return prev.valorBruto > 0 ? (prev.valorBruto - valorRecebidoTemp) / prev.valorBruto * 100 : 0;\n                        }\n                    }[\"useSimulador.useCallback[editarDescontoReal].calcularDescontoRealParaValor\"];\n                    // Busca binária para encontrar o valor negociado que resulta no desconto real desejado\n                    let valorMin = 0;\n                    let valorMax = prev.valorBruto;\n                    let valorNegociadoOtimo = prev.valorNegociado;\n                    let melhorDiferenca = Infinity;\n                    let melhorDesconto = prev.descontoReal;\n                    console.log(\"\\uD83C\\uDFAF Iniciando busca bin\\xe1ria para desconto real: \".concat(novoDescontoReal, \"%\"));\n                    console.log(\"Desconto real atual: \".concat(prev.descontoReal, \"%\"));\n                    console.log(\"Intervalo inicial: \".concat(valorMin, \" - \").concat(valorMax));\n                    // Máximo de 25 iterações para maior precisão\n                    for(let i = 0; i < 25; i++){\n                        const valorTeste = (valorMin + valorMax) / 2;\n                        const descontoRealCalculado = calcularDescontoRealParaValor(valorTeste);\n                        console.log(\"Itera\\xe7\\xe3o \".concat(i + 1, \": valorTeste=\").concat(valorTeste.toFixed(2), \", desconto=\").concat(descontoRealCalculado.toFixed(2), \"%\"));\n                        if (descontoRealCalculado === -1) {\n                            // Erro na redistribuição, tentar valor maior\n                            console.log('❌ Erro na redistribuição, ajustando valor mínimo');\n                            valorMin = valorTeste;\n                            continue;\n                        }\n                        const diferenca = Math.abs(descontoRealCalculado - novoDescontoReal);\n                        // Se encontrou um resultado melhor, guardar\n                        if (diferenca < melhorDiferenca) {\n                            melhorDiferenca = diferenca;\n                            valorNegociadoOtimo = valorTeste;\n                            melhorDesconto = descontoRealCalculado;\n                            console.log(\"✅ Novo melhor resultado: desconto=\".concat(melhorDesconto.toFixed(2), \"%, diferen\\xe7a=\").concat(melhorDiferenca.toFixed(2)));\n                        }\n                        // Se a diferença é muito pequena, parar\n                        if (diferenca < 0.05) {\n                            console.log(\"\\uD83C\\uDFAF Precis\\xe3o atingida! Parando busca.\");\n                            break;\n                        }\n                        // Detectar se estamos no limite físico\n                        if (i > 10 && melhorDiferenca > 2) {\n                            console.log(\"⚠️ Poss\\xedvel limite f\\xedsico detectado. Melhor desconto poss\\xedvel: \".concat(melhorDesconto.toFixed(2), \"%\"));\n                            break;\n                        }\n                        // Ajustar os limites da busca\n                        if (descontoRealCalculado < novoDescontoReal) {\n                            // Desconto calculado é menor que o desejado, precisamos diminuir valor negociado\n                            valorMax = valorTeste;\n                            console.log(\"\\uD83D\\uDCC9 Desconto baixo (\".concat(descontoRealCalculado.toFixed(2), \"% < \").concat(novoDescontoReal, \"%), diminuindo valorMax para \").concat(valorMax.toFixed(2)));\n                        } else {\n                            // Desconto calculado é maior que o desejado, precisamos aumentar valor negociado\n                            valorMin = valorTeste;\n                            console.log(\"\\uD83D\\uDCC8 Desconto alto (\".concat(descontoRealCalculado.toFixed(2), \"% > \").concat(novoDescontoReal, \"%), aumentando valorMin para \").concat(valorMin.toFixed(2)));\n                        }\n                        // Verificar se o intervalo ficou muito pequeno\n                        if (Math.abs(valorMax - valorMin) < 100) {\n                            console.log(\"\\uD83D\\uDD0D Intervalo muito pequeno (\".concat(Math.abs(valorMax - valorMin).toFixed(2), \"), finalizando busca\"));\n                            break;\n                        }\n                    }\n                    console.log(\"\\uD83C\\uDFC1 Busca finalizada:\");\n                    console.log(\"   Valor negociado \\xf3timo: \".concat(valorNegociadoOtimo.toFixed(2)));\n                    console.log(\"   Desconto real resultante: \".concat(melhorDesconto.toFixed(2), \"%\"));\n                    console.log(\"   Diferen\\xe7a do objetivo: \".concat(melhorDiferenca.toFixed(2)));\n                    // Se a diferença ainda é muito grande, avisar o usuário\n                    if (melhorDiferenca > 1) {\n                        console.log(\"⚠️ N\\xe3o foi poss\\xedvel atingir exatamente \".concat(novoDescontoReal, \"%. Melhor resultado: \").concat(melhorDesconto.toFixed(1), \"%\"));\n                        const confirmar = confirm(\"N\\xe3o foi poss\\xedvel atingir exatamente \".concat(novoDescontoReal, \"% de desconto real.\\nMelhor resultado poss\\xedvel: \").concat(melhorDesconto.toFixed(1), \"%\\n\\nDeseja aplicar mesmo assim?\"));\n                        if (!confirmar) {\n                            return prev;\n                        }\n                    }\n                    // Aplicar o valor negociado ótimo encontrado\n                    const formasRedistribuidas = redistribuirValores(valorNegociadoOtimo, prev.formasPagamento);\n                    if (!formasRedistribuidas) {\n                        alert('Não é possível alterar o desconto real. Todas as formas de pagamento estão travadas.');\n                        return prev;\n                    }\n                    const updated = {\n                        ...prev,\n                        valorNegociado: valorNegociadoOtimo,\n                        formasPagamento: formasRedistribuidas.map({\n                            \"useSimulador.useCallback[editarDescontoReal]\": (forma)=>({\n                                    ...forma,\n                                    valorRecebido: calcularValorRecebidoForma(forma)\n                                })\n                        }[\"useSimulador.useCallback[editarDescontoReal]\"])\n                    };\n                    // Recalcular valores derivados\n                    updated.valorRecebidoTotal = updated.formasPagamento.reduce({\n                        \"useSimulador.useCallback[editarDescontoReal]\": (acc, forma)=>acc + forma.valorRecebido\n                    }[\"useSimulador.useCallback[editarDescontoReal]\"], 0);\n                    updated.descontoReal = updated.valorBruto > 0 ? (updated.valorBruto - updated.valorRecebidoTotal) / updated.valorBruto * 100 : 0;\n                    const somaFormas = updated.formasPagamento.reduce({\n                        \"useSimulador.useCallback[editarDescontoReal].somaFormas\": (acc, forma)=>acc + forma.valor\n                    }[\"useSimulador.useCallback[editarDescontoReal].somaFormas\"], 0);\n                    updated.valorRestante = updated.valorNegociado - somaFormas;\n                    console.log('Simulação atualizada via desconto real:', updated);\n                    console.log(\"Desconto real resultante: \".concat(updated.descontoReal, \"%\"));\n                    return updated;\n                }\n            }[\"useSimulador.useCallback[editarDescontoReal]\"]);\n        }\n    }[\"useSimulador.useCallback[editarDescontoReal]\"], [\n        redistribuirValores,\n        calcularValorRecebidoForma\n    ]);\n    const editarValorBruto = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[editarValorBruto]\": (novoValor)=>{\n            console.log('Editando valor bruto para:', novoValor);\n            recalcularSimulacao({\n                valorBruto: novoValor\n            });\n        }\n    }[\"useSimulador.useCallback[editarValorBruto]\"], [\n        recalcularSimulacao\n    ]);\n    const adicionarForma = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[adicionarForma]\": (forma)=>{\n            console.log('Adicionando forma:', forma);\n            setSimulacao({\n                \"useSimulador.useCallback[adicionarForma]\": (prev)=>{\n                    // Verificar travamento de desconto real\n                    if (prev.travamentos.descontoReal) {\n                        const novaFormaTemp = {\n                            ...forma,\n                            id: Date.now().toString(),\n                            valorRecebido: 0\n                        };\n                        novaFormaTemp.valorRecebido = calcularValorRecebidoForma(novaFormaTemp);\n                        const novoValorRecebidoTotal = prev.valorRecebidoTotal + novaFormaTemp.valorRecebido;\n                        const novoDescontoReal = prev.valorBruto > 0 ? (prev.valorBruto - novoValorRecebidoTotal) / prev.valorBruto * 100 : 0;\n                        if (novoDescontoReal > prev.travamentos.limiteDescontoReal) {\n                            alert(\"N\\xe3o \\xe9 poss\\xedvel adicionar esta forma. O desconto real excederia o limite de \".concat(prev.travamentos.limiteDescontoReal, \"%\"));\n                            return prev;\n                        }\n                    }\n                    const novaForma = {\n                        ...forma,\n                        id: Date.now().toString(),\n                        valorRecebido: 0,\n                        travado: false\n                    };\n                    novaForma.valorRecebido = calcularValorRecebidoForma(novaForma);\n                    const novasFormas = [\n                        ...prev.formasPagamento,\n                        novaForma\n                    ];\n                    const updated = {\n                        ...prev,\n                        formasPagamento: novasFormas\n                    };\n                    updated.valorRecebidoTotal = novasFormas.reduce({\n                        \"useSimulador.useCallback[adicionarForma]\": (acc, f)=>acc + f.valorRecebido\n                    }[\"useSimulador.useCallback[adicionarForma]\"], 0);\n                    updated.descontoReal = updated.valorBruto > 0 ? (updated.valorBruto - updated.valorRecebidoTotal) / updated.valorBruto * 100 : 0;\n                    const somaFormas = novasFormas.reduce({\n                        \"useSimulador.useCallback[adicionarForma].somaFormas\": (acc, f)=>acc + f.valor\n                    }[\"useSimulador.useCallback[adicionarForma].somaFormas\"], 0);\n                    updated.valorRestante = updated.valorNegociado - somaFormas;\n                    console.log('Nova simulação com forma adicionada:', updated);\n                    return updated;\n                }\n            }[\"useSimulador.useCallback[adicionarForma]\"]);\n        }\n    }[\"useSimulador.useCallback[adicionarForma]\"], [\n        calcularValorRecebidoForma\n    ]);\n    const atualizarForma = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[atualizarForma]\": (id, dadosAtualizados)=>{\n            console.log('Atualizando forma:', id, dadosAtualizados);\n            setSimulacao({\n                \"useSimulador.useCallback[atualizarForma]\": (prev)=>{\n                    const novasFormas = prev.formasPagamento.map({\n                        \"useSimulador.useCallback[atualizarForma].novasFormas\": (forma)=>{\n                            if (forma.id === id) {\n                                // Se a forma está travada, não permite alterar o valor\n                                if (forma.travado && dadosAtualizados.valor !== forma.valor) {\n                                    console.log('Forma travada, não é possível alterar o valor');\n                                    return forma;\n                                }\n                                const formaAtualizada = {\n                                    ...forma,\n                                    ...dadosAtualizados\n                                };\n                                formaAtualizada.valorRecebido = calcularValorRecebidoForma(formaAtualizada);\n                                return formaAtualizada;\n                            }\n                            return forma;\n                        }\n                    }[\"useSimulador.useCallback[atualizarForma].novasFormas\"]);\n                    const updated = {\n                        ...prev,\n                        formasPagamento: novasFormas\n                    };\n                    updated.valorRecebidoTotal = novasFormas.reduce({\n                        \"useSimulador.useCallback[atualizarForma]\": (acc, f)=>acc + f.valorRecebido\n                    }[\"useSimulador.useCallback[atualizarForma]\"], 0);\n                    updated.descontoReal = updated.valorBruto > 0 ? (updated.valorBruto - updated.valorRecebidoTotal) / updated.valorBruto * 100 : 0;\n                    const somaFormas = novasFormas.reduce({\n                        \"useSimulador.useCallback[atualizarForma].somaFormas\": (acc, f)=>acc + f.valor\n                    }[\"useSimulador.useCallback[atualizarForma].somaFormas\"], 0);\n                    updated.valorRestante = updated.valorNegociado - somaFormas;\n                    console.log('Simulação atualizada após edição:', updated);\n                    return updated;\n                }\n            }[\"useSimulador.useCallback[atualizarForma]\"]);\n        }\n    }[\"useSimulador.useCallback[atualizarForma]\"], [\n        calcularValorRecebidoForma\n    ]);\n    const removerForma = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[removerForma]\": (id)=>{\n            console.log('Removendo forma:', id);\n            setSimulacao({\n                \"useSimulador.useCallback[removerForma]\": (prev)=>{\n                    const novasFormas = prev.formasPagamento.filter({\n                        \"useSimulador.useCallback[removerForma].novasFormas\": (f)=>f.id !== id\n                    }[\"useSimulador.useCallback[removerForma].novasFormas\"]);\n                    return {\n                        ...prev,\n                        formasPagamento: novasFormas,\n                        valorRecebidoTotal: novasFormas.reduce({\n                            \"useSimulador.useCallback[removerForma]\": (acc, f)=>acc + f.valorRecebido\n                        }[\"useSimulador.useCallback[removerForma]\"], 0),\n                        descontoReal: prev.valorBruto > 0 ? (prev.valorBruto - novasFormas.reduce({\n                            \"useSimulador.useCallback[removerForma]\": (acc, f)=>acc + f.valorRecebido\n                        }[\"useSimulador.useCallback[removerForma]\"], 0)) / prev.valorBruto * 100 : 0,\n                        valorRestante: prev.valorNegociado - novasFormas.reduce({\n                            \"useSimulador.useCallback[removerForma]\": (acc, f)=>acc + f.valor\n                        }[\"useSimulador.useCallback[removerForma]\"], 0)\n                    };\n                }\n            }[\"useSimulador.useCallback[removerForma]\"]);\n        }\n    }[\"useSimulador.useCallback[removerForma]\"], []);\n    const limparFormas = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[limparFormas]\": ()=>{\n            console.log('Limpando todas as formas');\n            setSimulacao({\n                \"useSimulador.useCallback[limparFormas]\": (prev)=>({\n                        ...prev,\n                        formasPagamento: [],\n                        valorRecebidoTotal: 0,\n                        descontoReal: prev.valorBruto > 0 ? 100 : 0,\n                        valorRestante: prev.valorNegociado\n                    })\n            }[\"useSimulador.useCallback[limparFormas]\"]);\n        }\n    }[\"useSimulador.useCallback[limparFormas]\"], []);\n    const alternarTravamento = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[alternarTravamento]\": (tipo, valor)=>{\n            setSimulacao({\n                \"useSimulador.useCallback[alternarTravamento]\": (prev)=>({\n                        ...prev,\n                        travamentos: {\n                            ...prev.travamentos,\n                            [tipo]: !prev.travamentos[tipo],\n                            ...valor !== undefined && {\n                                limiteDescontoReal: valor\n                            }\n                        }\n                    })\n            }[\"useSimulador.useCallback[alternarTravamento]\"]);\n        }\n    }[\"useSimulador.useCallback[alternarTravamento]\"], []);\n    const alternarTravamentoForma = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useSimulador.useCallback[alternarTravamentoForma]\": (id)=>{\n            setSimulacao({\n                \"useSimulador.useCallback[alternarTravamentoForma]\": (prev)=>({\n                        ...prev,\n                        formasPagamento: prev.formasPagamento.map({\n                            \"useSimulador.useCallback[alternarTravamentoForma]\": (forma)=>forma.id === id ? {\n                                    ...forma,\n                                    travado: !forma.travado\n                                } : forma\n                        }[\"useSimulador.useCallback[alternarTravamentoForma]\"])\n                    })\n            }[\"useSimulador.useCallback[alternarTravamentoForma]\"]);\n        }\n    }[\"useSimulador.useCallback[alternarTravamentoForma]\"], []);\n    return {\n        simulacao,\n        recalcularSimulacao,\n        adicionarForma,\n        atualizarForma,\n        removerForma,\n        limparFormas,\n        alternarTravamento,\n        alternarTravamentoForma,\n        editarValorNegociado,\n        editarValorBruto,\n        editarDescontoReal\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useSimulador.ts\n"));

/***/ })

});